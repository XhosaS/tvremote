package defpackage;

import android.graphics.RuntimeShader;

/* compiled from: PG */
/* loaded from: classes2.dex */
public final class utc extends RuntimeShader {
    private float a;
    private float b;
    private float c;

    public utc(float f, int i, float f2, float f3) {
        super("\n        float triangleNoise(vec2 n) {\n            n  = fract(n * vec2(5.3987, 5.4421));\n            n += dot(n.yx, n.xy + vec2(21.5351, 14.3137));\n            float xy = n.x * n.y;\n            // compute in [0..2[ and remap to [-1.0..1.0[\n            return fract(xy * 95.4307) + fract(xy * 75.04961) - 1.0;\n        }\n\n        const float PI = 3.1415926535897932384626;\n\n        vec2 distort(vec2 p, float time, float distort_amount_radial,\n            float distort_amount_xy) {\n                float angle = atan(p.y, p.x);\n                  return p + vec2(sin(angle * 8 + time * 0.003 + 1.641),\n                            cos(angle * 5 + 2.14 + time * 0.00412)) * distort_amount_radial\n                     + vec2(sin(p.x * 0.01 + time * 0.00215 + 0.8123),\n                            cos(p.y * 0.01 + time * 0.005931)) * distort_amount_xy;\n        }\n\n        // Creates a luminosity mask and clamp to the legal range.\n        vec3 maskLuminosity(vec3 dest, float lum) {\n            dest.rgb *= vec3(lum);\n            // Clip back into the legal range\n            dest = clamp(dest, vec3(0.), vec3(1.0));\n            return dest;\n        }\n\n        // Integer mod. GLSL es 1.0 doesn't have integer mod :(\n        int imod(int a, int b) {\n            return a - (b * (a / b));\n        }\n\n        ivec3 imod(ivec3 a, int b) {\n            return ivec3(imod(a.x, b), imod(a.y, b), imod(a.z, b));\n        }\n\n        // Integer based hash function with the return range of [-1, 1].\n        vec3 hash(vec3 p) {\n            ivec3 v = ivec3(p);\n            v = v * 1671731 + 10139267;\n\n            v.x += v.y * v.z;\n            v.y += v.z * v.x;\n            v.z += v.x * v.y;\n\n            ivec3 v2 = v / 65536; // v >> 16\n            v = imod((10 - imod((v + v2), 10)), 10); // v ^ v2\n\n            v.x += v.y * v.z;\n            v.y += v.z * v.x;\n            v.z += v.x * v.y;\n\n            // Use sin and cos to map the range to [-1, 1].\n            return vec3(sin(float(v.x)), cos(float(v.y)), sin(float(v.z)));\n        }\n\n        // Skew factors (non-uniform).\n        const half SKEW = 0.3333333;  // 1/3\n        const half UNSKEW = 0.1666667;  // 1/6\n\n        // Return range roughly [-1,1].\n        // It's because the hash function (that returns a random gradient vector) returns\n        // different magnitude of vectors. Noise doesn't have to be in the precise range thus\n        // skipped normalize.\n        half simplex3d(vec3 p) {\n            // Skew the input coordinate, so that we get squashed cubical grid\n            vec3 s = floor(p + (p.x + p.y + p.z) * SKEW);\n\n            // Unskew back\n            vec3 u = s - (s.x + s.y + s.z) * UNSKEW;\n\n            // Unskewed coordinate that is relative to p, to compute the noise contribution\n            // based on the distance.\n            vec3 c0 = p - u;\n\n            // We have six simplices (in this case tetrahedron, since we are in 3D) that we\n            // could possibly in.\n            // Here, we are finding the correct tetrahedron (simplex shape), and traverse its\n            // four vertices (c0..3) when computing noise contribution.\n            // The way we find them is by comparing c0's x,y,z values.\n            // For example in 2D, we can find the triangle (simplex shape in 2D) that we are in\n            // by comparing x and y values. i.e. x>y lower, x<y, upper triangle.\n            // Same applies in 3D.\n            //\n            // Below indicates the offsets (or offset directions) when c0=(x0,y0,z0)\n            // x0>y0>z0: (1,0,0), (1,1,0), (1,1,1)\n            // x0>z0>y0: (1,0,0), (1,0,1), (1,1,1)\n            // z0>x0>y0: (0,0,1), (1,0,1), (1,1,1)\n            // z0>y0>x0: (0,0,1), (0,1,1), (1,1,1)\n            // y0>z0>x0: (0,1,0), (0,1,1), (1,1,1)\n            // y0>x0>z0: (0,1,0), (1,1,0), (1,1,1)\n            //\n            // The rule is:\n            // * For offset1, set 1 at the max component, otherwise 0.\n            // * For offset2, set 0 at the min component, otherwise 1.\n            // * For offset3, set 1 for all.\n            //\n            // Encode x0-y0, y0-z0, z0-x0 in a vec3\n            vec3 en = c0 - c0.yzx;\n            // Each represents whether x0>y0, y0>z0, z0>x0\n            en = step(vec3(0.), en);\n            // en.zxy encodes z0>x0, x0>y0, y0>x0\n            vec3 offset1 = en * (1. - en.zxy); // find max\n            vec3 offset2 = 1. - en.zxy * (1. - en); // 1-(find min)\n            vec3 offset3 = vec3(1.);\n\n            vec3 c1 = c0 - offset1 + UNSKEW;\n            vec3 c2 = c0 - offset2 + UNSKEW * 2.;\n            vec3 c3 = c0 - offset3 + UNSKEW * 3.;\n\n            // Kernel summation: dot(max(0, r^2-d^2))^4, noise contribution)\n            //\n            // First compute d^2, squared distance to the point.\n            vec4 w; // w = max(0, r^2 - d^2))\n            w.x = dot(c0, c0);\n            w.y = dot(c1, c1);\n            w.z = dot(c2, c2);\n            w.w = dot(c3, c3);\n\n            // Noise contribution should decay to zero before they cross the simplex boundary.\n            // Usually r^2 is 0.5 or 0.6;\n            // 0.5 ensures continuity but 0.6 increases the visual quality for the application\n            // where discontinuity isn't noticeable.\n            w = max(0.6 - w, 0.);\n\n            // Noise contribution from each point.\n            vec4 nc;\n            nc.x = dot(hash(s), c0);\n            nc.y = dot(hash(s + offset1), c1);\n            nc.z = dot(hash(s + offset2), c2);\n            nc.w = dot(hash(s + offset3), c3);\n\n            nc *= w*w*w*w;\n\n            // Add all the noise contributions.\n            // Should multiply by the possible max contribution to adjust the range in [-1,1].\n            return dot(vec4(32.), nc);\n        }\n    \n            uniform shader in_src;\n            uniform float in_gridNum;\n            uniform vec3 in_noiseMove;\n            uniform vec2 in_size;\n            uniform float in_aspectRatio;\n            uniform float in_opacity;\n            uniform float in_pixelDensity;\n            uniform float in_inverseLuma;\n            uniform half in_colorLumaMatteBlendFactor;\n            uniform half in_colorLumaMatteBrightness;\n            uniform half in_effectBlendFactor;\n            layout(color) uniform vec4 in_color;\n        \n            vec3 getColorTurbulenceMask(float luma) {\n                // Bring it to [0, 1] range.\n                luma = luma * 0.5 + 0.5;\n                half colorLuma =\n                    saturate(luma * in_colorLumaMatteBlendFactor + in_colorLumaMatteBrightness)\n                    * in_opacity;\n                vec3 colorLayer = maskLuminosity(in_color.rgb, colorLuma);\n                return colorLayer;\n            }\n        \n            vec4 main(vec2 p) {\n                vec2 uv = p / in_size.xy;\n                uv.x *= in_aspectRatio;\n                vec3 noiseP = vec3(uv + in_noiseMove.xy, in_noiseMove.z) * in_gridNum;\n                float luma = simplex3d(noiseP) * in_inverseLuma;\n                vec3 color = getColorTurbulenceMask(luma);\n                // Blend the result with the background color.\n                color = in_src.eval(p).rgb + color * in_effectBlendFactor;\n                // Add dither with triangle distribution to avoid color banding. Dither in the\n                // shader here as we are in gamma space.\n                float dither = triangleNoise(p * in_pixelDensity) / 255.;\n                color += dither.rrr;\n                // Return the pre-multiplied alpha result, i.e. [R*A, G*A, B*A, A].\n                return vec4(color * in_opacity, in_opacity);\n            }\n        ");
        setFloatUniform("in_gridNum", 0.3f);
        setFloatUniform("in_pixelDensity", f);
        setColorUniform("in_color", i);
        setFloatUniform("in_opacity", 1.0f);
        b(f2, f3);
        setFloatUniform("in_colorLumaMatteBlendFactor", 1.0f);
        setFloatUniform("in_colorLumaMatteBrightness", 0.0f);
        setFloatUniform("in_effectBlendFactor", 0.3f);
        setFloatUniform("in_inverseLuma", 1.0f);
        this.a = 0.0f;
        this.b = 0.0f;
        this.c = 0.0f;
        setFloatUniform("in_noiseMove", 0.0f, 0.0f, 0.0f);
    }

    public final void a(float f, utb utbVar) {
        utbVar.getClass();
        float f2 = 0.0f * f;
        float f3 = this.a + f2;
        this.a = f3;
        float f4 = this.b + f2;
        this.b = f4;
        float f5 = this.c + (f * 10.0f);
        this.c = f5;
        setFloatUniform("in_noiseMove", f3, f4, f5);
    }

    public final void b(float f, float f2) {
        setFloatUniform("in_size", f, f2);
        setFloatUniform("in_aspectRatio", f / Math.max(f2, 0.001f));
    }
}
